<?php

namespace WebSocketDemo\Libs;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-19 at 21:02:28.
 */
class RequestHandlerTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var \WebSocketDemo\Libs\RequestHandler
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new \WebSocketDemo\Libs\RequestHandler();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::time
	 * @todo   Implement testTime().
	 */
	public function testTime() {
		$time = $this->object->time();
		$interval = (microtime(true) - $time);
		$this->assertGreaterThan(0, $interval);
	}
	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::ping
	 * @assert pong
	 */
	public function testPing() {
		// Remove the following lines when you implement this test.
		$reply = $this->object->ping();
		$this->assertEquals('pong', $reply, sprintf("%s != %s", $reply, "pong"));
	}
	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::pong
	 */
	public function testPong() {
		// Remove the following lines when you implement this test.
		$reply = $this->object->pong();
		$this->assertEquals('ping', $reply);
	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::add
	 * @todo   Implement testAdd().
	 */
	public function testAdd($items = 10) {
		// Remove the following lines when you implement this test.
		for ($i = 0; $i < $items; $i++) {
			$reply[] = $this->object->add("item_" . $i);
			$this->assertGreaterThanOrEqual($i, $reply[$i], $reply[$i] . ' != ' . $i);
		}
		return $reply;
	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::getList
	 * @todo   Implement testGetList().
	 */
	public function testGetList() {
		// Remove the following lines when you implement this test.
		$expected = rand(5, 10);
		$this->testAdd($expected);
		$reply = $this->object->getList();
		$this->assertEquals(true, is_array($reply));
		$this->assertEquals($expected, count($reply), print_r($reply, true));
	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::delete
	 * @todo   Implement testDelete().
	 */
	public function testDelete() {
		// Remove the following lines when you implement this test.
		$items = rand(10, 20);
		$keys = $this->testAdd($items);
		$now = count($this->object->getList());
		shuffle($keys);
		foreach ($keys as $key) {
			$this->object->delete($key);
			$this->assertArrayNotHasKey($key, $this->object->getList(), "Key $key still exists!");
		}
		$this->object->delete("wrong_key");
	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::get
	 * @todo   Implement testGet().
	 */
	public function testGet() {
		$keys = $this->testAdd(rand(1, 20));
		foreach ($keys as $value) {
			$this->assertEquals('item_' . $value, $this->object->get((string) $value), $value . ' != ' . $this->object->get((string) $value));
		}
		$this->object->get("wrong_key");
	}

	/**
	 * @covers \WebSocketDemo\Libs\RequestHandler::set
	 * @todo   Implement testSet().
	 */
	public function testSet() {
		for ($i = 0; $i <= 10; $i++) {
			$keys[] = $i;
			$this->assertEquals(true, $this->object->set($i, "item_" . $i));
		}
		foreach ($keys as $value) {
			$this->assertEquals('item_' . $value, $this->object->get((string) $value), $value . ' != ' . $this->object->get((string) $value));
		}
	}

}
